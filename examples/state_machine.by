record Transition {
    from: String,
    to: String,
    trigger: String,
    invokeUponActivation: Callable[Void]
}


record StateMachine {
    transitions: List[Transition],
    startState: String
}




func main = argv: List[String] -> Int {
    let dailyLifeStateMachine = StateMachine::new(
        List[Transition]::new(
            Transition::new("home", "work", "home2work", Void -> Void {
                println("taking train from home to work")
            }),
            Transition::new("work", "home", "work2home", Void -> Void {
                println("taking train from work to home")
            }),
            Transition::new("home", "bed", "home2bed", Void -> Void {
                println("going to bed")
            }),
            Transition::new("bed", "home", "bed2home", Void -> Void {
                println("waking up from bed")
            })
        ), "home"
    );

    if x == y && y == x {
        y
    } else {
        z
    }
}
