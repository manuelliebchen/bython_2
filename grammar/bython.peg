Program <- %ows Function*

# Extern Function
#Extern <- 'extern' %ows 'func' %ows Identifier ('=' %ows (( 'Void'  %ows ) / CommaSeparatedList(VariableDeclaration)))? ('->' %ows TypeName)?

# Functions
Function <- 'func' %ows Identifier ('=' %ows (( 'Void'  %ows ) / CommaSeparatedList(VariableDeclaration)))? ('->' %ows TypeName)? BlockExpression
VariableDeclaration <- Identifier ':' %ows TypeName

# Function insides
Expression <- NoneArithmeticExpression (BinaryOperator Expression)?
NoneArithmeticExpression <- UnaryOperator?  ( '(' %ows Expression ')' %ows / BlockExpression / CallExpression / LetStatement / IfExpression / VariableExpression / FloatConstant / IntegerConstant / StringConstant / BooleanConstant)
BlockExpression <- '{' %ows (Expression ';' %ows)* Expression? '}' %ows
LetStatement <- 'let' %ows Identifier '=' %ows Expression
CallExpression <- Identifier '(' %ows CommaSeparatedList(Expression)? ')' %ows
IfExpression <- 'if' %ows Expression BlockExpression ('else' %ows (IfExpression / BlockExpression))?
VariableExpression <- Identifier ('.' %ows VariableExpression)?

# Nameing
TypeName <- Identifier ('[' %ows CommaSeparatedList(TypeName) ']' %ows)?
Identifier <- < (NoneIdentifier [a-zA-Z0-9_]+) / (!NoneIdentifier [a-zA-Z_][a-zA-Z0-9_]*)  > %ows
~NoneIdentifier <- 'true' / 'false' / 'if' / 'else' / 'func' / 'new'

# Sigulary
FloatConstant <- < [0-9]* '.' [0-9]+ > %ows
IntegerConstant <- < [0-9]+ > %ows
BooleanConstant <- < ( 'false' / 'true' ) > %ows
StringConstant <- (('"' < (!'"' .)*  > '"') / ("'" < (!"'" .)*  > "'")) %ows

# Operators
UnaryOperator <- < ('-' / '!') > %ows
BinaryOperator <- < ( '/' / '*' / '%' / '+' / '-' / '&&' / '||' / '!=' / '==' / '!=' / '>=' / '<=' / '>' / '<' ) > %ows

~%ows <- [ \t\n\r]* Comment?
~Comment <- '//' (!"\n" .)* "\n" %ows
CommaSeparatedList(I) <- I (',' %ows I)*

# Records
#Record <- 'record' %ows TypeName RecordBody
#RecordBody <- '{' %ows CommaSeparatedList(RecordMember) '}' %ows
#RecordMember <- Identifier ':' %ows TypeName

# Lambda
#LambdaExpression <- FuncDeclArgs '->' %ows TypeName? BlockExpression

#CallExpression <- (TypeName '::' %ows 'new' %ows / Identifier) '(' %ows CommaSeparatedList(Expression)? ')' %ows
